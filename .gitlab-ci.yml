stages:
  - build
  - test
  - sonarcloud
  - deploy

variables:
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
  GIT_DEPTH: "0"  # Para o Sonar funcionar corretamente com histórico
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

cache:
  paths:
    - .cache/pip
    - .sonar/cache

build-job:
  stage: build
  script:
    - echo "Compiling the code..."
    - echo "Compile complete."

test-job:
  stage: test
  image: python:3.10
  script:
    - pip install -r requirements.txt
    - pip install pytest pytest-cov
    - pytest --cov=app --cov-report=xml
    # Ajusta paths no coverage.xml para o ambiente Linux do runner (relativo)
    - sed -i 's|C:/Users/Pedro/PycharmProjects/ExternoAPI/|app/|g' coverage.xml
  artifacts:
    paths:
      - coverage.xml
      - .pytest_cache/
      - app/

sonarcloud-check:
  stage: sonarcloud
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  dependencies:
    - test-job
  script:
    - |
      sonar-scanner \
        -Dsonar.projectKey=pedrohenriqueque-group_ExternoAPI \
        -Dsonar.organization=pedrohenriqueque-group \
        -Dsonar.sources=app \
        -Dsonar.python.version=3.10 \
        -Dsonar.python.coverage.reportPaths=coverage.xml \
        -Dsonar.sourceEncoding=UTF-8 \
        -Dsonar.login=$SONAR_TOKEN
  only:
    - merge_requests
    - master
    - develop


render-deploy:
  stage: deploy
  image: curlimages/curl:latest
  script:
    - curl -X POST "https://api.render.com/deploy/srv-d10bv549c44c73dihid0?key=4TAdh2zqfgk"
  only:
    - master


deploy-job:
  stage: deploy
  image: python:3.11-alpine
  script:
    - apk add --no-cache zip
    - pip install awscli
    - aws --version
    - zip -r app.zip . -x '*.git*' '__pycache__/*' '*.DS_Store'
    - aws s3 cp app.zip s3://$S3_BUCKET_NAME/app.zip
    - aws deploy create-deployment --application-name $CODEDEPLOY_APPLICATION_NAME --deployment-group-name $CODEDEPLOY_DEPLOYMENT_GROUP_NAME --s3-location bucket=$S3_BUCKET_NAME,key=app.zip,bundleType=zip --region $AWS_DEFAULT_REGION

post-deploy-check:
  stage: post-check
  image: curlimages/curl
  script:
    - echo "Verificando o endpoint após deploy no Render..."
    - sleep 20  # dá tempo para o Render subir
    - curl --fail https://externoapi.onrender.com/ || exit 1
  only:
    - master

