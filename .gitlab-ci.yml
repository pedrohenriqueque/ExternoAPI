stages:
  - build
  - sonarcloud
  - deploy

variables:
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
  GIT_DEPTH: "0"  # Para o Sonar funcionar corretamente com histórico
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

cache:
  paths:
    - .cache/pip
    - .sonar/cache

build-job:
  stage: build
  script:
    - echo "Compiling the code..."
    - echo "Compile complete."

# Aqui só vamos garantir que o coverage.xml gerado localmente está disponível para o job sonarcloud
# Você precisa garantir que o coverage.xml gerado localmente seja enviado para o pipeline,
# por exemplo, via upload manual, commit, ou artifact compartilhado.

sonarcloud-check:
  stage: sonarcloud
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  script:
    - sonar-scanner -Dsonar.projectKey=pedrohenriqueque-group_ExternoAPI -Dsonar.organization=pedrohenriqueque-group -Dsonar.sources=app -Dsonar.python.version=3.10 -Dsonar.coverageReportPaths=coverage.xml -Dsonar.sourceEncoding=UTF-8 -Dsonar.login=$SONAR_TOKEN
  only:
    - merge_requests
    - master
    - develop
  dependencies:
    - build-job
  artifacts:
    paths:
      - coverage.xml


deploy-job:
  stage: deploy
  environment: production
  script:
    - echo "Deploying application..."
    - echo "Application successfully deployed."
